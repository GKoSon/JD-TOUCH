替补队员：
        case MQOPW:
          downdispatchOTP((char *)p->payload,p->id);
        break;
        case MQCDR:
          downdeviceControlRequest((char *)p->payload,p->id);
        break;
		
		
		
//////////////////keyidel/////////////


typedef struct _cj_deviceControlRequest
{
	char type[2] ;
	char peopleId[10];
} cj_deviceControlRequest;

void showdeviceControlRequest(cj_deviceControlRequest *p)
{

    printf("p->type %s\r\n",p->type);
    printf("p->peopleId %s\r\n",p->peopleId);

}
int cj_parse_deviceControlRequest(const char * pJson,cj_deviceControlRequest *item)
{

    char cnt=0;
	
    if(NULL == pJson)    return 1;
	
	
    cJSON * pRoot = cJSON_Parse(pJson);
    if(NULL == pRoot) 
    {
        const char *error_ptr = cJSON_GetErrorPtr();
        if (error_ptr != NULL) 
        {
          log(ERR,"Error before: %s\n", error_ptr);
        }
        
         cJSON_Delete(pRoot);

	  return 2;
    }

	

    cJSON * pSub = cJSON_GetObjectItem(pRoot, "type");
    if(NULL != pSub)
    {
		cnt++;
		memcpy(item->type,pSub->valuestring,strlen(pSub->valuestring));

    }
	
    pSub = cJSON_GetObjectItem(pRoot, "peopleId");
    if(NULL != pSub)
    {
		cnt++;	
		memcpy(item->peopleId,pSub->valuestring,strlen(pSub->valuestring));

    }		

    cJSON_Delete(pRoot);
    
    showdeviceControlRequest(item);
    
    if(cnt)
      return 0;
    else
      return 3;
}


void downdeviceControlRequest(char *p,uint16_t id)
{
    char code = 0;
    cj_deviceControlRequest item;
    memset(&item,0,sizeof(cj_deviceControlRequest));
    cj_parse_deviceControlRequest(p,&item);


    if(item.type[0]=='1')
    {
      log(DEBUG,"接到服务器控制命令-1执行开门\r\n");
      open_door();
    }
    else if(item.type[0]=='2')
    {
      log(DEBUG,"接到服务器控制命令-2执行关门\r\n");
      close_door();
    }
    else
     code =1;
    sys_delay(20);

    cj_response(CommonseqNo ,code );
}





//////////////////keyidel/////////////


typedef struct _cj_dispatchOTP
{
	char password[7] ;
	int  startTime;
	int  expireDate;
	char isOTP[2];
	char peopleId[10];
} cj_dispatchOTP;

void showdispatchOTP(cj_dispatchOTP *p)
{
    printf("p->password %s\r\n",p->password);
    printf("p->startTime %d\r\n",p->startTime);
    printf("p->expireDate %d\r\n",p->expireDate);
    printf("p->isOTP %s\r\n",p->isOTP);
    printf("p->peopleId %s\r\n",p->peopleId);
}

int cj_parse_dispatchOTP(const char * pJson,cj_dispatchOTP *item)
{
    char cnt=0;

    if(NULL == pJson)    return 1;


    cJSON * pRoot = cJSON_Parse(pJson);
    
    if(NULL == pRoot) 
    {
      const char *error_ptr = cJSON_GetErrorPtr();
      if (error_ptr != NULL) 
      {
        log(ERR,"Error before: %s\n", error_ptr);
      }

      cJSON_Delete(pRoot);

      return 2;
    }



    cJSON * pSub = cJSON_GetObjectItem(pRoot, "password");
    
    if(NULL != pSub)
    {
      cnt++;
      memcpy(item->password,pSub->valuestring,strlen(pSub->valuestring));
    }



    pSub = cJSON_GetObjectItem(pRoot, "startTime");
    if(NULL != pSub)
    {
      cnt++;	
      item->startTime = pSub->valueint;
    }


    pSub = cJSON_GetObjectItem(pRoot, "expireDate");
    if(NULL != pSub)
    {
      cnt++;	
      item->expireDate = pSub->valueint;
    }


    pSub = cJSON_GetObjectItem(pRoot, "isOTP");
    if(NULL != pSub)
    {
      cnt++;
      sprintf(item->isOTP,"%.2s",pSub->valuestring);
    }

    pSub = cJSON_GetObjectItem(pRoot, "peopleId");
    if(NULL != pSub)
    {
    cnt++;	
    memcpy(item->peopleId,pSub->valuestring,strlen(pSub->valuestring));

    }		

    cJSON_Delete(pRoot);

    showdispatchOTP(item);


    if(cnt == 5)
    return 0;
    else
    return 3;
}



void downdispatchOTP(char *p,uint16_t id)
{
    tempwdType	tempPwd;
    
    cj_dispatchOTP item;
    
    memset(&tempPwd , 0x00 , sizeof(tempwdType));
    memset(&item,0,sizeof(cj_dispatchOTP));
    
    if(0 != cj_parse_dispatchOTP(p,&item))
    {
      log(DEBUG,"接到服务器下发一次性密码 JS错误\r\n");

      cj_response(CommonseqNo ,1 );

      return;
    }

    tempPwd.pwd =  str_to_hex(item.password[0])<<12|str_to_hex(item.password[1])<<8|str_to_hex(item.password[2])<<4|str_to_hex(item.password[3]);
    tempPwd.time = item.expireDate ;//截止时间TINMEB
    memcpy(tempPwd.temp ,(uint8_t *)&item.startTime , 4);//起始事件TIMEA
    
    printf("pwd=%d---timea=%d----timeb=%d\r\n",tempPwd.pwd,item.startTime ,tempPwd.time);
    
    if((tempPwd.time  < 1500000000)||(tempPwd.pwd > 0x9999))
    {
      log_err("一次性密码解析失败\n");

      cj_response(CommonseqNo ,1 );

      return;
    }
    else
    {       
       log_err("一次性密码解析成功\n");

       tempwd.add(&tempPwd);
    }
 			

    sys_delay(20);

    cj_response(CommonseqNo ,0 );
}


////////////////++++++++++++++/////////////
		
		
DEL 主题

//需要优化
char topicPath[GMAX_MESSAGE_HANDLERS][45]={\
  "/server/timeCalibration/",\
  "/server/dispatchFilterItem/",\
  "/server/dispatchOTP/",\
  "/server/deviceControlRequest/",\
  "/server/uploadDeviceInfoRequest/",\
    
  "/client/uploadAccessLog/",\
  "/client/uploadAccessSensor/",\
  "/client/uploadDeviceInfo/",\
  "/client/uploadDeviceEvent/",\
  "/client/uploadDeviceMaintain/",\
  "/client/filterRequest/",\
  "/client/response/",\
  "/client/keepAlive/",\
};

char *cj_create_uploadAccessLog_pwd(long openTime,   int passwordType) 
{
	cJSON *root = NULL;//基础类型
	cJSON *detail = NULL;//嵌套再里面的
	char *outStr;

	root =  cJSON_CreateObject();
	cJSON_AddStringToObject(root,"deviceNo", getDeviceId());
	cJSON_AddNumberToObject(root,"openType", 0);
	cJSON_AddNumberToObject(root,"openTime", openTime);
	cJSON_AddNumberToObject(root,"lockStatus", 0);
	cJSON_AddNumberToObject(root,"openResult", 0);


	detail =  cJSON_CreateObject();
	cJSON_AddNumberToObject(detail,"passwordType", passwordType);

	cJSON_AddItemToObject(root, "parameters", detail);

	outStr = cJSON_Print(root);
	cJSON_Delete(root);
        
        RT_DEBUG_LOG(RT_DEBUG_IPC,("\r\n\r\n【%s】\r\n\r\n", outStr));
	return outStr;
}


char *cj_create_uploadAccessLog(long openTime,int openType,int Result) 
{
  cJSON *root = NULL;//基础类型
  cJSON *detail = NULL;//嵌套再里面的
  char  *outStr;

  root =  cJSON_CreateObject();
  cJSON_AddStringToObject(root,"deviceNo", getDeviceId());
  cJSON_AddNumberToObject(root,"openType", openType);
  cJSON_AddNumberToObject(root,"openTime", openTime);
  cJSON_AddNumberToObject(root,"lockStatus", Result);
  cJSON_AddNumberToObject(root,"openResult", Result);


  detail =  cJSON_CreateObject();
  if(openType==5)
  {
          printf("门类开门方式\r\n");
          cJSON_AddRawToObject(detail,"faceCapture", "");
  }
  cJSON_AddItemToObject(root, "parameters", detail);

  outStr = cJSON_Print(root);
  cJSON_Delete(root);

  printf("\r\n\r\n【%s】\r\n\r\n", outStr);
  return outStr;
}
		